---
apiVersion: batch/v1
kind: Job
metadata:
  name: configure-stackrox
  namespace: {{ .Values.stackrox.namespace | quote }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
        - image: quay.io/rht-labs/stack-do500:3.0.8
          command:
            - /bin/bash
            - -c
            - |
              test {{ .Values.verbose }} == true && set -x

              # wait for CRD
              while [ true ]; do oc get crd centrals.platform.stackrox.io; if [ $? -eq 0 ]; then break; fi ; sleep 5s; done

              # wait for operator to spin-up
              oc -n openshift-operators wait pod -l app=rhacs-operator --for=condition=Ready --timeout=180s
              if [ $? != 0 ]; then
                echo "ðŸ›‘ timed out waiting for operator pod, exiting ðŸ›‘";
                exit 1;
              fi

              # install central first
              install_central() {
                cat <<EOF | oc apply -f-
                apiVersion: platform.stackrox.io/v1alpha1
                kind: Central
                metadata:
                  name: stackrox-central-services
                  namespace: {{ .Values.stackrox.namespace | quote }}
                spec:
                  monitoring:
                    openshift:
                      enabled: true
                  central:
                    notifierSecretsEncryption:
                      enabled: false
                    exposure:
                      loadBalancer:
                        enabled: false
                        port: 443
                      nodePort:
                        enabled: false
                      route:
                        enabled: true
                    telemetry:
                      enabled: true
                    db:
                      isEnabled: Default
                      persistence:
                        persistentVolumeClaim:
                          claimName: central-db
                    persistence:
                      persistentVolumeClaim:
                        claimName: stackrox-db
                  egress:
                    connectivityPolicy: Online
                  scannerV4:
                    db:
                      persistence:
                        persistentVolumeClaim:
                          claimName: scanner-v4-db
                    indexer:
                      scaling:
                        autoScaling: Enabled
                        maxReplicas: 5
                        minReplicas: 2
                        replicas: 3
                    matcher:
                      scaling:
                        autoScaling: Enabled
                        maxReplicas: 5
                        minReplicas: 2
                        replicas: 3
                    scannerComponent: Default
                  scanner:
                    analyzer:
                      scaling:
                        autoScaling: Enabled
                        maxReplicas: 5
                        minReplicas: 2
                        replicas: 3
                      resources:
                      {{- toYaml .Values.stackrox.analyzer.resources | nindent 24 }}
              EOF
              }

              install_central
              until [ "$?" == 0 ]
              do
                  echo -e "Waiting for 0 rc from oc commands - central install"
                  ((i=i+1))
                  if [ $i -gt 5 ]; then
                      echo -e "Failed - oc central install never ready?"
                      exit 1
                  fi
                  sleep 5
                  install_central
              done

              # wait for central
              echo "waiting for stackrox-central ..."
              while test 0 == $(oc -n {{ .Values.stackrox.namespace }} get pod -l app.kubernetes.io/component=central -o name 2>/dev/null | wc -l); do sleep 5; done
              oc -n {{ .Values.stackrox.namespace }} wait pod -l app.kubernetes.io/component=central --for=condition=Ready --timeout=200s
              if [ $? != 0 ]; then
                echo "ðŸ›‘ timed out waiting for central, exiting ðŸ›‘";
                exit 1;
              fi
              sleep 15;

              # generate an api token
              ROX_ENDPOINT=central.{{ .Values.stackrox.namespace | quote }}
              ROX_ADMIN_PASSWD=$(oc -n {{ .Values.stackrox.namespace }} get secret central-htpasswd -o go-template='{{ printf "{{index .data \"password\" | base64decode}}" }}')

              while test -z ${ROX_API_TOKEN}; do
                export ROX_API_TOKEN=$(curl -sk -u "admin:${ROX_ADMIN_PASSWD}" "https://$ROX_ENDPOINT/v1/apitokens/generate" -d '{"name": {{ .Values.stackrox.clusterName | quote }}, "role": "Admin"}' | jq -r '.token')
                sleep 5;
              done

              # store token in a secret
              cat <<EOF | oc apply -n {{ .Values.stackrox.namespace | quote }} -f -
              apiVersion: v1
              data:
                token: "$(printf ${ROX_API_TOKEN} | base64 -w0)"
              kind: Secret
              metadata:
                name: rox-api-token-{{ .Values.stackrox.clusterName }}
              EOF

              # generate init bundle
              while test ! -f /tmp/cluster_init_bundle.yaml; do
                roxctl -e "${ROX_ENDPOINT}:443" central init-bundles generate {{ .Values.stackrox.clusterName | quote }} --output-secrets /tmp/cluster_init_bundle.yaml --insecure-skip-tls-verify
                sleep 5;
              done
              oc -n stackrox apply -f /tmp/cluster_init_bundle.yaml

              # create secured cluster
              cat <<EOF | oc apply -f-
              apiVersion: platform.stackrox.io/v1alpha1
              kind: SecuredCluster
              metadata:
                name: {{ .Values.stackrox.clusterName }}-secured-cluster
                namespace: {{ .Values.stackrox.namespace | quote }}
              spec:
                monitoring:
                  openshift:
                    enabled: true
                auditLogs:
                  collection: Auto
                admissionControl:
                  listenOnUpdates: true
                  bypass: BreakGlassAnnotation
                  contactImageScanners: DoNotScanInline
                  listenOnCreates: true
                  replicas: 3
                  timeoutSeconds: 20
                  listenOnEvents: true
                scannerV4:
                  db:
                    persistence:
                      persistentVolumeClaim:
                        claimName: scanner-v4-db
                  indexer:
                    scaling:
                      autoScaling: Enabled
                      maxReplicas: 5
                      minReplicas: 2
                      replicas: 3
                  scannerComponent: Default
                scanner:
                  analyzer:
                    scaling:
                      autoScaling: Enabled
                      maxReplicas: 5
                      minReplicas: 2
                      replicas: 3
                  scannerComponent: AutoSense
                perNode:
                  collector:
                    collection: CORE_BPF
                    forceCollection: false
                    imageFlavor: Regular
                  taintToleration: TolerateTaints
                clusterName: {{ .Values.stackrox.clusterName | quote }}
                centralEndpoint: 'central.{{ .Values.stackrox.namespace }}:443'
              EOF
              exit 0;
          imagePullPolicy: Always
          name: configure-stackrox
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: configure-stackrox
      serviceAccountName: configure-stackrox
      terminationGracePeriodSeconds: 10
